// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  role       Role     @default(STUDENT)
  createdAt  DateTime @default(now())
  verifiedAt DateTime?

  // Relations
  studentProfile  StudentProfile?
  recruiterProfile RecruiterProfile?
  jobs            Job[]
  likesGiven      Like[]           @relation("UserLikes")
  exposures       Exposure[]
  reports         Report[]         @relation("ReporterReports")

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model StudentProfile {
  id         String  @id @default(cuid())
  userId     String  @unique
  name       String
  branch     String
  year       Int
  headline   String
  skills     String[]
  projectUrl String?
  resumeUrl  String?
  videoUrl   String?

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches Match[]

  @@index([year])
  @@index([skills])
  @@map("student_profiles")
}

model RecruiterProfile {
  id     String @id @default(cuid())
  userId String @unique
  name   String
  org    String
  title  String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recruiter_profiles")
}

model Job {
  id          String   @id @default(cuid())
  recruiterId String
  title       String
  description String
  skills      String[]
  batch       Int?
  location    String
  ctcMin      Int
  ctcMax      Int
  videoUrl    String?
  createdAt   DateTime @default(now())

  // Relations
  recruiter User      @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  matches   Match[]
  slots     Slot[]

  @@index([recruiterId])
  @@index([batch])
  @@index([createdAt])
  @@index([skills])
  @@map("jobs")
}

model Like {
  id       String   @id @default(cuid())
  fromUser String
  toType   EntityType
  toId     String
  stage    Int      @default(1)
  createdAt DateTime @default(now())

  // Relations
  user User @relation("UserLikes", fields: [fromUser], references: [id], onDelete: Cascade)

  @@unique([fromUser, toType, toId])
  @@index([fromUser])
  @@index([toType, toId])
  @@index([createdAt])
  @@map("likes")
}

model Match {
  id        String   @id @default(cuid())
  studentId String
  jobId     String
  createdAt DateTime @default(now())

  // Relations
  student    StudentProfile @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  job        Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviews Interview[]

  @@unique([studentId, jobId])
  @@index([studentId])
  @@index([jobId])
  @@index([createdAt])
  @@map("matches")
}

model Slot {
  id       String   @id @default(cuid())
  jobId    String
  startTs  DateTime
  endTs    DateTime
  isBooked Boolean  @default(false)

  // Relations
  job        Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviews Interview[]

  @@index([jobId])
  @@index([startTs])
  @@index([isBooked])
  @@map("slots")
}

model Interview {
  id      String          @id @default(cuid())
  matchId String
  slotId  String
  meetUrl String
  icsPath String
  status  InterviewStatus @default(BOOKED)

  // Relations
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  slot  Slot  @relation(fields: [slotId], references: [id], onDelete: Cascade)

  @@unique([matchId, slotId])
  @@index([matchId])
  @@index([slotId])
  @@index([status])
  @@map("interviews")
}

model Exposure {
  id         String     @id @default(cuid())
  userId     String
  entityType EntityType
  entityId   String
  shownAt    DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([shownAt])
  @@map("exposures")
}

model Report {
  id               String     @id @default(cuid())
  reporterUserId   String
  entityType       EntityType
  entityId         String
  reason           String
  createdAt        DateTime   @default(now())

  // Relations
  reporter User @relation("ReporterReports", fields: [reporterUserId], references: [id], onDelete: Cascade)

  @@index([reporterUserId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("reports")
}

enum Role {
  STUDENT
  RECRUITER
  ADMIN
}

enum EntityType {
  JOB
  STUDENT
  USER
}

enum InterviewStatus {
  BOOKED
  DONE
  NO_SHOW
}